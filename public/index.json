[
{
	"uri": "http://localhost:1313/nonotnone.0/",
	"title": " Mee - Digital Maketing ",
	"tags": [],
	"description": "",
	"content": "Digital Maketing TikTok for Business Creators Overview: https://www.linkedin.com/learning/tiktok-for-business-creators?u=103729754\nIn this course, I\u0026rsquo;m going to show you how to carve out a unique and memorable space for your business.\n1- Identify your authentic create persona\nContent Introduction Prepairation Configuration Cleanup "
},
{
	"uri": "http://localhost:1313/nonotnone.0/2-content1/2.1-start/",
	"title": "Getting Started with Tiktok",
	"tags": [],
	"description": "",
	"content": "Benefits of creating on TikTok The first benefit is that TikTok has a huge, rapidly growing audience. It creates an anti-marketing marketing strategy, meaning it doesn\u0026rsquo;t feel salesy. A powerful kind of focus group for your business. The benefits of bringing your business to TikTok are many. This is the perfect time to share your knowledge and experience, to build a sense of community, to open yourself up to unexpected connections and relationships, let\u0026rsquo;s do this! Identifying your authentic creator persona When you\u0026rsquo;re wondering whether or not to develop or post certain content, here are some ways to get started.\n1- Consider what three words should come to mind for your audience after consuming your content.\n1- Three words 2- Example Consider what three words should come to mind : Mission - Promise - Pillars as someone who shares career and leadership advice : Informed - Self-Configdent - Inspired for a high-end fashion brand for men though: Smart - Fresh - Stylish 2- Indentify your unique zone of genious.\nWhether it\u0026rsquo;s developing from scratch multilingual mobile apps or unforgettable guided hikes for the over 50 crowd. It\u0026rsquo;s important to distill your specialty down to its essence. Example: While I focus on career development, my specific zone of genius is in helping people stand up for themselves at work 3- What\u0026rsquo;s your supperpower?\nHow would that sound in just five to seven words? Take a moment to reflect and write down your responses. Which leads us to your target audience. Who is your product, service or content geared to? Example: My own target audience is primarily female professionals. So I factor that heavily in my content. For Dove, for example, their target audience is 18 to 35 year old women who value natural, healthy beauty products. For a company like Nike though, it\u0026rsquo;s a much broader target audience, men, women, and kids spanning 15 to 55 years old. What is it for you? Take a moment to write down your target audience. 4- Consider delivery\nAs you think about the core problems you want to help your audience solve, consider who they\u0026rsquo;d most like to go to for help. Then I\u0026rsquo;d like you to answer this question. How would they want that person to solve their problem? With the familiarity of a friend, with the rigor and knowledge of a professor, with seriousness or humor and levity? Jot that down now and then add what aesthetics, movements, or musical choices could enhance that delivery. Realize that, according to Harvard Business School, 95% of purchasing decisions are based on feelings, not logic. Your audience is looking for brands that feel relatable and speak to their gut. So this is your opportunity to share your best work in the most human and personal way. Go forth and use your personality to stand out. Setting up your accounts Persional Bussiness 1 2 "
},
{
	"uri": "http://localhost:1313/nonotnone.0/3-config/3.1-ec2/",
	"title": "IaC",
	"tags": [],
	"description": "",
	"content": "In this Workshop we will create an EC2 instances with the information bellow\nOverview AWS EC2 Instances name: Web-Server VPC: 10.0.0.0/16 Subnets: 10.0.1.0/24 Region: Singapore (ap-southeast-1) Available zone: ap-southeast-1b Instance type: t2.micro Amazon Machine Images: Amazon Linux 2 AMI Key pair: tf-cli-keypair Security setting: Only allow my ip connect SSH to EC2 instance Allow all access from port 8080 to EC2 instance Terraform configuration Security credential variables: variables.tf\nvariable \u0026#34;access_key\u0026#34; { type = string sensitive = true } variable \u0026#34;secret_key\u0026#34; { type = string sensitive = true } variable \u0026#34;region\u0026#34; { type = string default = \u0026#34;ap-southeast-1\u0026#34; } Instances configurations :main.tf\nvariable vpc_cidr_block {} variable subnet_1_cidr_block {} variable avail_zone {} variable env_prefix {} variable instance_type {} variable my_ip {} variable ami_id {} resource \u0026#34;aws_vpc\u0026#34; \u0026#34;myapp-vpc\u0026#34; { cidr_block = var.vpc_cidr_block tags = { Name = \u0026#34;${var.env_prefix}-vpc\u0026#34; } } resource \u0026#34;aws_subnet\u0026#34; \u0026#34;myapp-subnet-1\u0026#34; { vpc_id = aws_vpc.myapp-vpc.id cidr_block = var.subnet_1_cidr_block availability_zone = var.avail_zone tags = { Name = \u0026#34;${var.env_prefix}-subnet-1\u0026#34; } } resource \u0026#34;aws_security_group\u0026#34; \u0026#34;myapp-sg\u0026#34; { name = \u0026#34;myapp-sg\u0026#34; vpc_id = aws_vpc.myapp-vpc.id ingress { from_port = 22 to_port = 22 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } ingress { from_port = 8080 to_port = 8080 protocol = \u0026#34;tcp\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] } egress { from_port = 0 to_port = 0 protocol = \u0026#34;-1\u0026#34; cidr_blocks = [\u0026#34;0.0.0.0/0\u0026#34;] prefix_list_ids = [] } tags = { Name = \u0026#34;${var.env_prefix}-sg\u0026#34; } } resource \u0026#34;aws_internet_gateway\u0026#34; \u0026#34;myapp-igw\u0026#34; { vpc_id = aws_vpc.myapp-vpc.id tags = { Name = \u0026#34;${var.env_prefix}-internet-gateway\u0026#34; } } resource \u0026#34;aws_route_table\u0026#34; \u0026#34;myapp-route-table\u0026#34; { vpc_id = aws_vpc.myapp-vpc.id route { cidr_block = \u0026#34;0.0.0.0/0\u0026#34; gateway_id = aws_internet_gateway.myapp-igw.id } # default route, mapping VPC CIDR block to \u0026#34;local\u0026#34;, created implicitly and cannot be specified. tags = { Name = \u0026#34;${var.env_prefix}-route-table\u0026#34; } } # Associate subnet with Route Table resource \u0026#34;aws_route_table_association\u0026#34; \u0026#34;a-rtb-subnet\u0026#34; { subnet_id = aws_subnet.myapp-subnet-1.id route_table_id = aws_route_table.myapp-route-table.id } output \u0026#34;server-ip\u0026#34; { value = aws_instance.myapp-server.public_ip } resource \u0026#34;aws_instance\u0026#34; \u0026#34;myapp-server\u0026#34; { ami = var.ami_id instance_type = var.instance_type key_name = \u0026#34;tf-cli-keypair\u0026#34; associate_public_ip_address = true subnet_id = aws_subnet.myapp-subnet-1.id vpc_security_group_ids = [aws_security_group.myapp-sg.id] availability_zone\t= var.avail_zone tags = { Name = \u0026#34;${var.env_prefix}-server\u0026#34; } } Terraform provider AWS : terraform.tfvars\n# Network and Instance variables vpc_cidr_block = \u0026#34;10.0.0.0/16\u0026#34; subnet_1_cidr_block = \u0026#34;10.0.1.0/24\u0026#34; avail_zone = \u0026#34;ap-southeast-1b\u0026#34; env_prefix = \u0026#34;web\u0026#34; my_ip = \u0026#34;\u0026lt;myip\u0026gt;/32\u0026#34; ami_id = \u0026#34;ami-04f73ca9a4310089f\u0026#34; Installation Terraform plan:\ndocker-compose run â€“rm terraform plan Terraform apply:\ndocker-compose run --rm terraform apply --auto-approve AWS Instance checking: Add Keypair permission:\nchmod 400 tf-cli-keypair.pem SSH to EC2 Instances:\nssh -i tf-cli-keypair.pem ec2-user@13.250.64.49 AWS Instance checking: "
},
{
	"uri": "http://localhost:1313/nonotnone.0/1-intro/",
	"title": "Introduction",
	"tags": [],
	"description": "",
	"content": "DevOps Projects Overview Continuous Integration and Continuous Deployment (CI/CD) is a cornerstone of DevOps methodology, emphasizing automation and collaboration throughout the software development lifecycle.\nContinuous Integration (CI): Developers regularly push code changes to a shared repository. Automated tests are run against the newly integrated code to ensure it doesn\u0026rsquo;t break existing functionality. If tests fail, developers are notified immediately, and they can address issues before they become larger problems. Continuous Deployment (CD): Once code changes pass the CI phase, they\u0026rsquo;re automatically deployed to production or staging environments. This process reduces manual intervention and ensures that new features or bug fixes reach users as quickly as possible. Content Introduction Prepairation Configure Cleanup "
},
{
	"uri": "http://localhost:1313/nonotnone.0/3-config/3.2-cicd/3.2.1-jenkins/",
	"title": "Jenkins",
	"tags": [],
	"description": "",
	"content": "Updating \u0026hellip;.\n"
},
{
	"uri": "http://localhost:1313/nonotnone.0/3-config/3.2-cicd/",
	"title": "CICD",
	"tags": [],
	"description": "",
	"content": "Updating \u0026hellip;.\n"
},
{
	"uri": "http://localhost:1313/nonotnone.0/2-content1/2.2-create/",
	"title": "Create Content",
	"tags": [],
	"description": "",
	"content": "Amazon Web Services (AWS) is a comprehensive and widely used cloud computing platform provided by Amazon. It offers a vast array of services, allowing individuals and businesses to build and deploy scalable applications and services without the need to invest in physical infrastructure\nOverview AWS CLI : The AWS Command Line Interface (CLI) is a powerful tool provided by Amazon Web Services (AWS) that allows you to interact with AWS services directly from your command line or terminal It provides a convenient and scriptable way to manage your AWS resources without needing to use the AWS Management Console Configuration Prepair and run docker compose file\ndocker-compose run --rm aws --version AWS: Create keypair to access AWS Instances: tf-cli-keypair.pem\ndocker-compose run --rm aws ec2 create-key-pair --key-name tf-cli-keypair --query \u0026#39;KeyMaterial\u0026#39; --output text \u0026gt; tf-cli-keypair.pem Create AWS Account for Terraform use AWS CLI: tf-cli\ndocker-compose run --rm aws iam create-user --user-name tf-cli AWS Checking keypair: Create Access Key \u0026amp; export to local\ndocker-compose run --rm aws iam create-access-key --user-name tf-cli \u0026gt; tf_cli-access_key.json Create policy and configure to allow access EC2 and Limit Region\nCreate a custom policy file: ec2-limited-access-policy.json {\r\u0026#34;Version\u0026#34;: \u0026#34;2012-10-17\u0026#34;,\r\u0026#34;Statement\u0026#34;: [\r{\r\u0026#34;Effect\u0026#34;: \u0026#34;Allow\u0026#34;,\r\u0026#34;Action\u0026#34;: \u0026#34;ec2:*\u0026#34;,\r\u0026#34;Resource\u0026#34;: \u0026#34;*\u0026#34;,\r\u0026#34;Condition\u0026#34;: {\r\u0026#34;StringEquals\u0026#34;: {\r\u0026#34;ec2:Region\u0026#34;: \u0026#34;ap-southeast-1\u0026#34;\r}\r}\r}\r]\r} Create a IAM policy: EC2FullAccessAPSouthEast1 docker-compose run --rm aws iam create-policy --policy-name EC2FullAccessAPSouthEast1 --policy-document file://ec2-limited-access-policy.json Attach the Policy to the IAM User: (tf-cli) docker-compose run --rm aws iam attach-user-policy --user-name tf-cli --policy-arn arn:aws:iam::637423373411:policy/EC2FullAccessAPSouthEast1 AWS Checking User: "
},
{
	"uri": "http://localhost:1313/nonotnone.0/3-config/3.2-cicd/3.2.2-gitlab/",
	"title": "Gitlab",
	"tags": [],
	"description": "",
	"content": "Updating \u0026hellip;.\n"
},
{
	"uri": "http://localhost:1313/nonotnone.0/2-content1/",
	"title": "TikTok for Business Creators",
	"tags": [],
	"description": "",
	"content": "Is TikTok right for my business? TikTok has quickly become one of the most popular social media platforms in the world. Everyone from college kids to musicians and celebrities to entrepreneurs are on it. If you\u0026rsquo;re a little bit skeptical about TikTok, I get it. But here\u0026rsquo;s the thing, there\u0026rsquo;s room for everyone on TikTok. And in this course, I\u0026rsquo;m going to show you how to carve out a unique and memorable space for your business. As a professional in my 40s I\u0026rsquo;m probably not the first person that comes to mind when you think of TikTok creators, but starting in mid 2021 by consistently sharing career advice I wish I\u0026rsquo;d known sooner in the form of hacks, role plays and stories, I\u0026rsquo;ve had exciting results I wouldn\u0026rsquo;t have dreamed of. Paying it forward in this way has led to a highly engaged and loyal community of hundreds of thousands of followers, several TikToks going viral and coverage by international media outlets. A highlight of my journey was getting recognized as one of the best career content creators by fast company. And you know what? There\u0026rsquo;s so much opportunity for you and your business on TikTok. Together, we\u0026rsquo;ll explore achievable and beneficial ways to create and engage on TikTok not by thinking like a traditional advertiser but by thinking like a creator. Contents Docker AWS Teraform Git Local "
},
{
	"uri": "http://localhost:1313/nonotnone.0/3-config/",
	"title": "Configuration",
	"tags": [],
	"description": "",
	"content": " The Projects for the workshop \u0026hellip;.. Content IaC CICD "
},
{
	"uri": "http://localhost:1313/nonotnone.0/2-content1/2.3-interface/",
	"title": "Interface &amp; Features",
	"tags": [],
	"description": "",
	"content": "Terraform is a open-source tool used to build, modify, and version control infratrucrure\nOverview Provider(provider.tf): Enables Terrafrom to interact with cloud providers and other APIs Terraform (versions.tf): Sets version constaints for Terraform and optionally maps provides to a source address and version constaint Variables (variable.tf): Input variables define reusable values and work like function arguments in general-purpose programming languages Resource (main.tf): Resource blocks describe infrastructure objects like VPCs, subnets, route tables, and gateways Data : Data sources allow Terraform to ultilize information form resources that were defined outside of Terraform (or defined a different Terraform configuration) Output: Outputs return structured data form your configuration and work like return values in generaral-purpose programming languages Terraform.tfvars: To set lots of variables, it is more convenient to specify their values in a variable definitions file Command terraform init [options]: command initializes a working directory containing Terraform configuration files. terraform plan [options]: command creates an execution plan, which lets you preview the changes that Terraform plans to make to your infrastructure. terraform apply [options] [plan file]: command executes the actions proposed in a Terraform plan terraform destroy [options]: command is a convenient way to destroy all remote objects managed by a particular Terraform configuration. Run Terraform in containter: Run docker compose:\ndocker-compose run --rm terraform version Run configure:\nProvider (AWS): versions.tf\nterraform {\rrequired_providers {\raws = {\rsource = \u0026#34;hashicorp/aws\u0026#34;\rversion = \u0026#34;~\u0026gt; 4.16\u0026#34;\r}\r}\rrequired_version = \u0026#34;\u0026gt;= 1.2.0\u0026#34;\r} Security credential variables: variables.tf\nvariable \u0026#34;access_key\u0026#34; {\rtype = string\rsensitive = true\r}\rvariable \u0026#34;secret_key\u0026#34; {\rtype = string\rsensitive = true\r}\rvariable \u0026#34;region\u0026#34; {\rtype = string\rdefault = \u0026#34;ap-southeast-1\u0026#34;\r} Terraform init:\ndocker-compose run --rm terraform init "
},
{
	"uri": "http://localhost:1313/nonotnone.0/4-cleanup/4.1-ec2/",
	"title": "IaC",
	"tags": [],
	"description": "",
	"content": "Clean up resources We will process to clearn up all the resources\nTerraform: Run docker compose:\ndocker-compose run --rm terraform destroy --auto-approve AWS Checking "
},
{
	"uri": "http://localhost:1313/nonotnone.0/2-content1/2.4-monetizing/",
	"title": "Monetizing",
	"tags": [],
	"description": "",
	"content": "Git is a distributed version control system (DVCS) that helps developers track changes to source code during software development. It allows multiple developers to collaborate on projects simultaneously.\nOverview Github GitHub is a web-based platform built on top of Git, the distributed version control system. It offers a variety of features to help developers collaborate on software projects GitHub provides a platform for hosting Git repositories. Developers can create new repositories to store their code, either publicly (visible to everyone) or privately (accessible only to authorized collaborators) Configuration Create Github Repository and Access\nCreate a public repo: https://github.com/nonotnonez/ws-0001\nCreate Github Access Key : https://github.com/settings/tokens\nName: github_token_ws Expiration:\t90 days Select scopes: repo workflow Clone Source form Github: git clone https://**token**@github.com/NoNotNonez/ws-0001.git\nCopy Source code to Github Repo:\ncd /ws-0001/terraform Create .gitignore:\nto security and prevent important file upload to github Push Source code to Git Repo:\ngit status git add . git commit -m \u0026ldquo;Add Tf source\u0026rdquo; git push "
},
{
	"uri": "http://localhost:1313/nonotnone.0/4-cleanup/",
	"title": "Resource Cleanup",
	"tags": [],
	"description": "",
	"content": "Clean up resources All processing to clearn up all the resources\nContent IAC CICD "
},
{
	"uri": "http://localhost:1313/nonotnone.0/4-cleanup/4.2-jenkins/",
	"title": "CICD",
	"tags": [],
	"description": "",
	"content": "We are processing \u0026hellip;.\n"
},
{
	"uri": "http://localhost:1313/nonotnone.0/2-content1/2.5-conclusion/",
	"title": "Conclusion",
	"tags": [],
	"description": "",
	"content": "Overview We will use local environment with Vagrant and VirtualBox to test best practices.\nVagrant Vagrant is an open-source tool for building and managing virtualized development environments. It helps developers create and configure reproducible and portable development environments that closely mimic production setups. Virtualbox VirtualBox is a powerful open-source virtualization software developed by Oracle Corporation. It allows users to run multiple guest operating systems (OS) simultaneously on a single physical machine. Configuration Requirement\nMachine 1: Linux-server IP: 192.168.33.100 Memory: 2048 Mb Machine 2: Jenkins-server IP: 192.168.33.110 Memory: 5120 Mb Machine 3: Monitor-server IP: 192.168.33.120 Memory: 2048 Mb Vagrantfile\n# -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(\u0026#34;2\u0026#34;) do |config| config.vm.box = \u0026#34;ubuntu/focal64\u0026#34; # Configuration for the first virtual machine config.vm.define \u0026#34;machine1\u0026#34; do |machine1| machine1.vm.network \u0026#34;private_network\u0026#34;, ip: \u0026#34;192.168.33.100\u0026#34; machine1.vm.hostname = \u0026#34;linux-server\u0026#34; machine1.vm.provider \u0026#34;virtualbox\u0026#34; do |vb| vb.memory = \u0026#34;2048\u0026#34; end machine1.vm.synced_folder \u0026#34;./datas\u0026#34;, \u0026#34;/vagrant_data\u0026#34; end # Configuration for the second virtual machine config.vm.define \u0026#34;machine2\u0026#34; do |machine2| machine2.vm.network \u0026#34;private_network\u0026#34;, ip: \u0026#34;192.168.33.110\u0026#34; machine2.vm.hostname = \u0026#34;jenkins-server\u0026#34; machine2.vm.provider \u0026#34;virtualbox\u0026#34; do |vb| vb.memory = \u0026#34;5120\u0026#34; end machine2.vm.synced_folder \u0026#34;./datas\u0026#34;, \u0026#34;/vagrant_data\u0026#34; end # Configuration for the third virtual machine config.vm.define \u0026#34;machine3\u0026#34; do |machine3| machine3.vm.network \u0026#34;private_network\u0026#34;, ip: \u0026#34;192.168.33.120\u0026#34; machine3.vm.hostname = \u0026#34;monitor-server\u0026#34; machine3.vm.provider \u0026#34;virtualbox\u0026#34; do |vb| vb.memory = \u0026#34;2048\u0026#34; end machine3.vm.synced_folder \u0026#34;./datas\u0026#34;, \u0026#34;/vagrant_data\u0026#34; machine3.vm.provision \u0026#34;shell\u0026#34;, inline: \u0026lt;\u0026lt;-SHELL apt-get update SHELL end end Installation\nvagrant up vagrant status vagrant ssh vagrant halt "
},
{
	"uri": "http://localhost:1313/nonotnone.0/categories/",
	"title": "Categories",
	"tags": [],
	"description": "",
	"content": ""
},
{
	"uri": "http://localhost:1313/nonotnone.0/tags/",
	"title": "Tags",
	"tags": [],
	"description": "",
	"content": ""
}]